<?xml version="1.0" encoding="utf-8" standalone="yes"?><search><entry><title>MRFramework</title><url>/post/mrframework/mrframework/</url><categories><category>Unity 框架</category></categories><tags/><content type="html"><![CDATA[  这是一个轻量级的 Unity 框架，能帮助你进行快速的游戏开发。
框架基本使用1. MVC 的实现（1）定义一个架构（提供 MVC、分层、模块管理等）
Architecture 用于管理模块，或者说 Architecture 提供一整套架构的解决方案，而模块管理和提供 MVC 只是其功能的一小部分。
public class CounterApp : Architecture&amp;lt;CounterApp&amp;gt; { protected override void Init() { // 注册 Model this.RegisterModel(new CounterAppModel()); } } （2）定义一个 Model 对象
Model 的引入是为了解决数据共享的问题，而不是说单只是为了让数据和表现分离，这一点是非常重要的一点。
public class CounterAppModel : AbstractModel { public int Count; protected override void OnInit() { Count = 0; } } （3）Controller 逻辑
/* 实现 IController 接口 */ public class CounterAppController : MonoBehaviour , IController { // View public Button BtnAdd; public Button BtnSub; public Text TxtCount; // Model private CounterAppModel model; void Start() { // 获取 Model model = this.GetModel&amp;lt;CounterAppModel&amp;gt;(); // 监听输入 BtnAdd.onClick.AddListener(() =&amp;gt; { // 交互逻辑 model.Count++; // 表现逻辑 UpdateView(); }); BtnSub.onClick.AddListener(() =&amp;gt; { // 交互逻辑 model.Count--; // 表现逻辑 UpdateView(); }); // 更新面板信息 UpdateView(); } void …  ]]></content></entry><entry><title>Unity常见问题解决方案集合</title><url>/post/unity%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E9%9B%86%E5%90%88/</url><categories><category>分类</category></categories><tags/><content type="html"><![CDATA[  2D项目图层遮挡问题在 2D 游戏中，常常会有角色一会儿跑到物体前，一会儿跑到物体后面的情况，如下图：
只设置物体的Layer，无法实现正确的遮挡关系的。
（1）通过在 Unity 中设置自定义轴向控制精灵的渲染
在 Edit-&gt;Project Settings-&gt;Graphics 中，找到 Camera Settings（摄像机渲染设置），将Transparency Sort Mode（透明度排序模式）设置为 Custom Axis，由于2D的遮挡关系常常是由y轴确定的，越往上越会被覆盖，所以将Transparency Sort Axis中的y设为1，其余设置为0。
如果你的项目是 URP 2D 项目，你看到的情况会是这样的，并没有 Camera Settings：
你只需要修改 UniversalRenderPipelineAsset_Renderer 配置文件：
在物体的 SpriteRanderer 中找到 Sprite Sort Point（精灵渲染顺序点），在默认情况下是物体的中心点（Center），这里需要选择的是轴心点，即物体以此为支点旋转的点 Pivot。
之后找到游戏物体对应的图片，将轴心点设置在物体的最底端 Bottom 或自定义 Custom。
（2）通过代码直接修改物体层级实现
private List&lt;SpriteRenderer&gt; SpriteDynamic; private List&lt;SpriteRenderer&gt; SpriteStatic; //让树、箱子等不会移动的类型为static private void Awake() { // 把需要层级排序的物体，以该对象为父物体 // 都放到该对象下统一管理 SpriteRenderer[] spriteRenderers = GetComponentsInChildren&lt;SpriteRenderer&gt;(); SpriteDynamic = new List&lt;SpriteRenderer&gt;(); SpriteStatic = new List&lt;SpriteRenderer&gt;(); for(int i = 0; i &lt; spriteRenderers.Length; i++) { if (spriteRenderers[i].gameObject.isStatic) { //sorting order=y*-100 spriteRenderers[i].sortingOrder = Mathf.RoundToInt(spriteRenderers[i].transform.position.y * -100); SpriteStatic.Add(spriteRenderers[i]); } else //isDynamic { SpriteDynamic.Add(spriteRenderers[i]); } } } private void Update() { // 动态的需要一直更新 // 比如玩家就需要放到动态的这里，因为玩家是在移动的 for(int i = 0; i &lt; SpriteDynamic.Count; i++) { SpriteDynamic[i].sortingOrder = Mathf.RoundToInt(SpriteDynamic[i].transform.position.y * -100); } } // 场景后续添加的物体也要通过代码添加管理 public void AddStaticObject(SpriteRenderer sr) { SpriteStatic.Add(sr); // 静态物体添加完后，需要手动再排序一次 foreach(var temp in SpriteStatic) { temp.sortingOrder = Mathf.RoundToInt(temp.transform.position.y * -100); } } public void AddDynamicObject(SpriteRenderer sr) { SpriteDynamic.Add(sr); // 动态物体添加完后，由 Update 进行排序 } 动画系统检测动画播放完毕（1）通过检测当前动画播放结束
animatorInfo.normalizedTime 获取当前动画的播放进度，animatorInfo.IsTag 识别当前动画：
可以直接使用 animatorInfo.normalizedTime &gt;= 1 判断； 融合的动画可能在 normalizedTime&gt;=1 之前就切换到下个动画了，导致触发不了回调； Loop 循环的动画在第二次循环播放后，normalizedTime 的值会一直 &gt;1，导致在动画循环完第一次的时候就已经触发了回调； private AnimatorStateInfo animatorInfo; private bool isReadyToExit = false; private void Update() { animatorInfo = animator.GetCurrentAnimatorStateInfo(0); if(!isReadyToExit &amp;&amp; animatorInfo.normalizedTime &lt; 0.5f) { isReadyToExit = true; } if(isReadyToExit &amp;&amp; animatorInfo.normalizedTime &gt; 0.95f) { isReadyToExit = false; if(animatorInfo.IsTag(&#34;Attack&#34;)) Debug.LogError(&#34;attack animation end&#34;); DoSomething(); } } （2）通过检测两个动画之间的切换判断播放结束
animatorInfo.shortNameHash 对比两个 AnimatorStateInfo，animatorInfo.IsTag 识别当前动画：
发现当前帧与上一帧的动画信息不一致时，判定上一帧的动画播放结束，触发回调。
private AnimatorStateInfo curAnimInfo, lastAnimInfo; private AnimatorStateInfo lastAnimInfo; private void UpdateAni02() { AnimatorStateInfo curAnimInfo = animator.GetCurrentAnimatorStateInfo(0); if(lastAnimInfo.shortNameHash != curAnimInfo.shortNameHash) { if(lastAnimInfo.IsTag(&#34;Attack&#34;)) Debug.LogError(&#34;attack animation end&#34;); lastAnimInfo = curAnimInfo; DoSomething(); } }   ]]></content></entry><entry><title>Git 入门到入土（四）一些操作汇总</title><url>/post/git-%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F%E5%9B%9B%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C%E6%B1%87%E6%80%BB/</url><categories><category>Git</category></categories><tags/><content type="html"> 汇总一些 git 的常用操作，以便后续查看。
git push 显示22端口连接错误
错误显示：
&amp;amp;gt; git push ssh: connect to host github.com port 22: Connection timed out fatal: Could not read from remote repository. 原因：可能是网络限制或阻塞导致无法通过端口 22 连接到 GitHub。
解决方案：通过修改 SSH 配置来使用端口 443
C:\Users\你的用户名\.ssh\config 配置以下内容（如果没有该文件，请手动创建，没有后缀） Host github.com Hostname ssh.github.com Port 443 输入 ssh -T git@github.com 测试 SSH 连接 显示提交的信息
列出所有的提交，包括每次提交的作者、日期、提交消息等详细信息：
git log 如果需要更容易地浏览和识别特定的提交：
git log --oneline --oneline：这个选项会修改 git log 的输出，使得每个提交只显示一行信息。通常，这行信息包括两个主要部分：
提交的哈希值（通常是短格式，只显示前几个字符）：这是每个提交的唯一标识符。 提交的消息：这是当提交被创建时，由提交者提供的简短描述。 合并上一次提交
在 Git 中，如果你想要合并上一次的提交，可以使用 git rebase 命令进行交互式变基（interactive rebase）。下面是如何做到这一点的步骤：
（1）开启交互式变基： 使用命令 git rebase -i HEAD~2。这将打开一个交互式界面，其中列出了最近的两次提交。HEAD~2 表示从当前提交开始的最近两次提交。
（2）选择要合并的提交：
在交互式界面中，你会看到类似于以下内容的列表：
pick abc1234 上次提交的消息 pick def5678 倒数第二次提交的消息 要将最新的提交合并到前一个提交中，你需要将 pick 关键字更改为 squash 或者 s（简写）：
pick abc1234 倒数第二次提交的消息 squash def5678 上次提交的消息 （3）编辑提交消息：
保存并关闭编辑器后，Git 会打开另一个编辑器窗口，让你编辑合并后的提交消息。你可以选择 …</content></entry><entry><title>Git 入门到入土（三）结合 GitHub 实现远程管理</title><url>/post/git-%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F%E4%B8%89%E7%BB%93%E5%90%88-github-%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86/</url><categories><category>Git</category></categories><tags/><content type="html"><![CDATA[  我们之前的文章都是在本地对项目仓库进行版本管理，现在要把仓库 push 上 GitHub 进行远程版本管理，主要是为了方便备份项目，应对本地项目丢失的问题。
01 创建 GitHub 仓库本文默认了你有一个 GitHub 账号了，如果没有，请先去注册。
创建完成之后是这样的：
其实下面 GitHub 已经提供了上传仓库的命令，但是你可以跟着我敲一遍。
02 上传仓库到 GitHub（SSH）这里默认你已经初始化了仓库，如果没有请跳转：Git 入门到入土（二）Unity 本地版本控制2.1 配置 SSH如果你已经配置过了，可以跳过本步骤。
（1）打开终端，在终端中输入以下命令来生成一个新的SSH密钥对（即公钥和私钥）：
ssh-keygen -t rsa -b 4096 -C &#34;your_email@example.com&#34; 将 your_email@example.com 替换成你的电子邮件地址。这个电子邮件地址应该是与你的Git账户关联的。
之后一路回车，直到完成。
（2）测试SSH连接：你可以通过运行以下命令来测试SSH连接是否成功配置
ssh -T git@github.com （3）找到本地生成的 SSH 公钥（默认位置在 C:\Users\用户\.ssh\id_rsa.pub）：
（4）在你的账户 Settings 页面，找到 SSH and GPG keys，点击 New SSH key：
2.2 Push 到 GitHub首先来到 Unity 项目根目录，进入 cmd 输入指令：
git add ./ git commit -m “自己定义一个提交信息” （如：git commit -m &#34;first commit&#34;） git branch -M main git remote add origin git@github.com:账户名/仓库名.git git push -u origin main 注意 git remote add origin git@github.com:账户名/仓库名.git 在你的 GitHub 仓库生成页面有提供：
刷新一下仓库页面：
本地仓库文件：
  ]]></content></entry><entry><title>Hugo 引用本地图片</title><url>/post/hugo-%E5%BC%95%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/</url><categories><category>Hugo</category></categories><tags/><content type="html"> 本篇文章主要解决 Hugo 的图片显示问题：
怎么在不使用图床的情况下，让本地编辑和线上也能正常显示图片 可以更好的管理图片 在 Hugo 中，有两个特殊的 .md 文件：index.md、_index.md。根据文档 Page Bundles
介绍，index.md 用于树叶节点，_index.md 用在树枝节点，如果文章命名为 index.md，那么生成的网页将为当前文件夹名：
content └── posts └── test-post ├── index.md // &amp;lt;- https://example.com/posts/test-post └── image.png // &amp;lt;- https://example.com/posts/test-post/image.png 这样就可以在本地图片和文章绑定，不仅能正常显示，也方便管理图片：
引用图片格式：
![image](./imgs/image.png) 最后设置一下 Typora 的图片设置，之后图片就会自动复制到 imgs 文件夹并引用：</content></entry><entry><title>Git 入门到入土（二）Unity 本地版本控制</title><url>/post/git-%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F%E4%BA%8Cunity-%E6%9C%AC%E5%9C%B0%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/</url><categories><category>Git</category></categories><tags/><content type="html"><![CDATA[  01 项目设置为了更好的使用 git 版本管理，我们需要对 unity 项目做一些设置工作。
1.1 Edit-&gt;Version Control将 Version Control 选项下的 Mode 设为 Visual Meta Files，这样 Unity3D 将为项目中的每个文件或者每个文件夹生成对应的 .Meta 文件。该文件是一个文本文件，记录了对应文件的相关信息，版本控制软件可以以此来对文件版本进行对比和合并操作。
1.2 Edit-&gt;Project Settings-&gt;EditorAsset Serialization Mode 选项，选择 Force Text。
做这个设置的原因是：unity3D 中的资源默认是以二进制的形式进行组织的，这种组织方式对版本控制来说是不合适的，我们希望在版本控制中看到文本的变化，而不是看到乱七八糟的二进制乱码。
02 创建 Git 本地仓库在 Unity 项目设置完成后，我们就开始创建版本管理仓库。
2.1 初始化仓库首先我们要在 Unity 项目路径下初始化：
git init 这会在你的项目下生成一个 .git 文件夹：
这就代表初始化 git 本地仓库成功了。
2.2 配置 .gitignore在 Unity 中进行版本控制主要针对 Assets 和 ProjectSetting 这两个文件夹，因为除此以外的文件和文件夹都是Unity 在运行过程中产生的临时文件，这些文件会在使用 Unity 打开项目后重新生成，因此无需对这些文件或文件夹进行版本控制。
创建一个 .gitignore 文件：
在文件中填入我们要忽略的文件：
Library/ Temp/ Logs/ UserSettings/ Packages/ *.vsconfig *.sln *.csproj *.sln *.userprefs *.unityproj *.DS_Store 2.3 add/commit输入：git add ./ 将文件添加到暂存库
输入：git commit -m &quot;Init unity project（提交描述可以自定义）&quot; 将文件提交到版本管理
输入：git log 查看提交记录
出现这个就表示提交成功了。
2.4 修改和回退版本我们在开发的过程中会不断的产生修改，很可能把原本正常的一个功能修改的不能使用，这时候想要复原都追悔莫及。现在有了版本管理工具，这个操作就变得无比简单了。
假设我们新建了一个错误文件：test_error.txt
现在，你把这个文件 commit 上去：
git add ./ git commit -m &#34;Add Error Text&#34; git log 这个文本很明显是写错了，现在你想回退到上一个版本怎么办呢？
因为这个项目很小，你可以很容易找到 error_text.txt，然后把他删掉。但是当实际工作中，代码比较多的时候，锁定问题往往非常困难，这时候就可以使用 git reset，帮助我们回退到上一个正确的版本。
（1）回退上一个版本：
git reset --hard HEAD^ 如果你是 windows 用户，可以使用：
回退一个版本：git reset --hard HEAD~1 一般都是默认回退一个版本：git reset --hard HEAD~ （2）回退指定版本：
git reset --hard f2b63(这个是版本号) 回退后，可以看到 test_error.txt 文件也消失了，这这样你就可以在上一个正确的版本基础上重新开始你的开发工作了。
  ]]></content></entry><entry><title>Git 入门到入土（一）安装 Git</title><url>/post/git-%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F%E4%B8%80%E5%AE%89%E8%A3%85-git/</url><categories><category>Git</category></categories><tags/><content type="html"><![CDATA[   常用网站和资料
git 动画学习：https://learngitbranching.js.org/
官网：Git - Documentation廖雪峰git教程：Git教程常用git指令(案例)：https://liaoxuefeng.gitee.io/re一、安装 Git直接从 Git 官网下载最新的长期支持版：https://git-scm.com/
直接下一步直到安装完成就可以了，安装没什么可说的。
输入 git -v 命令查看是否安装成功：
二、Git 介绍（一）查看 Git 帮助文档例如，要想获得 git config 命令的手册，执行：
$ git help config 此外，如果你不需要全面的手册，只需要可用选项的快速参考，那么可以用 -h 选项获得更简明的 “help” 输出：
$ git add -h usage: git add [&lt;options&gt;] [--] &lt;pathspec&gt;... -n, --dry-run dry run -v, --verbose be verbose -i, --interactive interactive picking -p, --patch select hunks interactively -e, --edit edit current diff and apply -f, --force allow adding otherwise ignored files -u, --update update tracked files --renormalize renormalize EOL of tracked files (implies -u) -N, --intent-to-add record only the fact that the path will be added later -A, --all add changes from all tracked and untracked files --ignore-removal ignore paths removed in the working tree (same as --no-all) --refresh don&#39;t add, only refresh the index --ignore-errors just skip files which cannot be added because of errors --ignore-missing check if - even missing - files are ignored in dry run --chmod (+|-)x override the executable bit of the listed files （二）基础概念git 报错或者提示信息中包含的一些基础名词，了解这些名词可以帮助你更快 debug
名词 信息 Untracked files 不可追踪的文件，尚未git add 的文件 stage 暂存区，git add 的时候存在这里   ]]></content></entry></search>