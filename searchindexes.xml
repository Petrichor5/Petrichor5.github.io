<?xml version="1.0" encoding="utf-8" standalone="yes"?><search><entry><title>MRFramework</title><url>/post/mrframework/mrframework/</url><categories><category>Unity 框架</category></categories><tags/><content type="html"><![CDATA[  这是一个轻量级的 Unity 框架，能帮助你进行快速的游戏开发。
快速开始（1）项目导入 Addressables 。
（2）导入 MRFramework。
文件信息：
MRFramework 框架 MRFrameworkExample 框架示例（可选导入） 框架基本使用1. MVC 的实现（1）定义一个架构（提供 MVC、分层、模块管理等）
Architecture 用于管理模块，或者说 Architecture 提供一整套架构的解决方案，而模块管理和提供 MVC 只是其功能的一小部分。
public class CounterApp : Architecture&amp;lt;CounterApp&amp;gt; { protected override void Init() { // 注册 Model this.RegisterModel(new CounterAppModel()); } } （2）定义一个 Model 对象
Model 的引入是为了解决数据共享的问题，而不是说单只是为了让数据和表现分离，这一点是非常重要的一点。
public class CounterAppModel : AbstractModel { public int Count; protected override void OnInit() { Count = 0; } } （3）Controller 逻辑
/* 实现 IController 接口 */ public class CounterAppController : MonoBehaviour , IController { // View public Button BtnAdd; public Button BtnSub; public Text TxtCount; // Model private CounterAppModel model; void Start() { // 获取 Model model = this.GetModel&amp;lt;CounterAppModel&amp;gt;(); // 监听输入 BtnAdd.onClick.AddListener(() =&amp;gt; { // 交互逻辑 model.Count++; // 表现逻辑 UpdateView(); }); …  ]]></content></entry><entry><title>Hugo 引用本地图片</title><url>/post/hugo-%E5%BC%95%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/</url><categories><category>Hugo</category></categories><tags/><content type="html"> 本篇文章主要解决 Hugo 的图片显示问题：
怎么在不使用图床的情况下，让本地编辑和线上也能正常显示图片 可以更好的管理图片 在 Hugo 中，有两个特殊的 .md 文件：index.md、_index.md。根据文档 Page Bundles
介绍，index.md 用于树叶节点，_index.md 用在树枝节点，如果文章命名为 index.md，那么生成的网页将为当前文件夹名：
content └── posts └── test-post ├── index.md // &amp;lt;- https://example.com/posts/test-post └── image.png // &amp;lt;- https://example.com/posts/test-post/image.png 这样就可以在本地图片和文章绑定，不仅能正常显示，也方便管理图片：
引用图片格式：
![image](./imgs/image.png)</content></entry><entry><title>Git 入门到入土（二）Unity 本地版本控制</title><url>/post/git-%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F%E4%BA%8Cunity-%E6%9C%AC%E5%9C%B0%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/</url><categories><category>Git</category></categories><tags/><content type="html"> 01 项目设置
为了更好的使用 git 版本管理，我们需要对 unity 项目做一些设置工作。
1.1 Edit-&amp;gt;Version Control
将 Version Control 选项下的 Mode 设为 Visual Meta Files，这样 Unity3D 将为项目中的每个文件或者每个文件夹生成对应的 .Meta 文件。该文件是一个文本文件，记录了对应文件的相关信息，版本控制软件可以以此来对文件版本进行对比和合并操作。
1.2 Edit-&amp;gt;Project Settings-&amp;gt;Editor
Asset Serialization Mode 选项，选择 Force Text。
做这个设置的原因是：unity3D 中的资源默认是以二进制的形式进行组织的，这种组织方式对版本控制来说是不合适的，我们希望在版本控制中看到文本的变化，而不是看到乱七八糟的二进制乱码。</content></entry><entry><title>Git 入门到入土（一）安装 Git</title><url>/post/git-%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F%E4%B8%80%E5%AE%89%E8%A3%85-git/</url><categories><category>Git</category></categories><tags/><content type="html"><![CDATA[   常用网站和资料
官网：Git - Documentation廖雪峰git教程：Git教程常用git指令(案例)：https://liaoxuefeng.gitee.io/re一、安装 Git直接从 Git 官网下载最新的长期支持版：https://git-scm.com/
直接下一步直到安装完成就可以了，安装没什么可说的。
二、Git 介绍（一）查看 Git 帮助文档例如，要想获得 git config 命令的手册，执行：
$ git help config 此外，如果你不需要全面的手册，只需要可用选项的快速参考，那么可以用 -h 选项获得更简明的 “help” 输出：
$ git add -h usage: git add [&lt;options&gt;] [--] &lt;pathspec&gt;... -n, --dry-run dry run -v, --verbose be verbose -i, --interactive interactive picking -p, --patch select hunks interactively -e, --edit edit current diff and apply -f, --force allow adding otherwise ignored files -u, --update update tracked files --renormalize renormalize EOL of tracked files (implies -u) -N, --intent-to-add record only the fact that the path will be added later -A, --all add changes from all tracked and untracked files --ignore-removal ignore paths removed in the working tree (same as --no-all) --refresh don&#39;t add, only refresh the index --ignore-errors just skip files which cannot be added because of errors --ignore-missing check if - even missing - files are ignored in dry run --chmod (+|-)x override the executable bit of the listed files （二）基础概念git 报错或者提示信息中包含的一些基础名词，了解这些名词可以帮助你更快 debug
名词 信息 Untracked files 不可追踪的文件，尚未git add 的文件 stage 暂存区，git add 的时候存在这里   ]]></content></entry></search>